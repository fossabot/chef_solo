class Influx
  # All actions with InfluxDB
  require 'json'
  require 'date'
  require 'influxdb'
  require 'time'

  def initialize
    @version_id = "<%= node['tiger_perf']['version_id'] %>"
    @influx_protocol = "<%= node['tiger_perf']['influxdb_protocol'] %>"
    @influx_host = "<%= node['tiger_perf']['influx_host'] %>"
    @influx_port = "<%= node['tiger_perf']['influx_port'] %>"
    @influx_db = "<%= node['tiger_perf']['influx_db'] %>"
    @influx_username = "<%= node['influxdb']['influx_admin'] %>"
    @influx_password = "<%= node['influxdb']['influx_admin_pass'] %>"
    @lg_id="<%= node['container_name'] %>"
    $logger.info "influx username: #{@influx_username}"
  end

  def getBuildDurationTime(time)
  	queryStartTime = "SELECT first(responseTime) FROM \"requestsRaw\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' and time > \'#{time}\'"
  	queryEndTime   = "SELECT last(responseTime)  FROM \"requestsRaw\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' and time > \'#{time}\'"
  	begin
      retries ||= 0
      getStartTime = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{queryStartTime}" `
      getEndTime   = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{queryEndTime}" `
      buildStarted = getStartTime[/\d{4}-\d{2}-\d{2}[T]\d{2}:\d{2}:\d{2}.\d*[Z]/]
      $buildStarted = (DateTime.parse(buildStarted).to_time - 5).strftime("%Y-%m-%dT%H:%M:%SZ")
      $buildEnded   = getEndTime[/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d*[Z]/]
    rescue
      puts "Error #{$!}. Start time: #{getStartTime}  End time: #{getEndTime} Time: #{time}"
      puts "#{queryStartTime}"
      $logger.info "  |- Could not parse start or end time. Start time: #{getStartTime}  End time: #{getEndTime} .Retry #{retries}"
      retry if (retries +=1 ) < 5
    end
  end

#  Backup
#  def checkLastLG
#    p 'checkLastLG'
#    querySelectAggregatedData = "SELECT COUNT(overall_duration_in_ms) as \"generators_count\" FROM \"testStartEnd\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\" = \'#{$test_type}\' AND \"buildID\" = \'#{$current_build_number}\' AND time > \'#{$buildStarted}\' AND \"status\" = \'finished\'"
#    p "#{querySelectAggregatedData}"
#    getData = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{querySelectAggregatedData}" `
#    p "Response is : "
#    p "#{getData}"
#    data = JSON.parse(getData)
#    generators_count = data['results'][0]['series'][0]['values'][0][1]
#    if ( generators_count.to_i == $lg_count.to_i )
#        $logger.info "  |- Container with id = #{@lg_id} is the last"
#        return true
#      else
#        return false
#	  end
#  end

  def checkLastLG
    p 'checkLastLG'
    querySelectAggregatedData = "SELECT COUNT(overall_duration_in_ms) as \"generators_count\" FROM \"testStartEnd\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\" = \'#{$test_type}\' AND \"buildID\" = \'#{$current_build_number}\' AND time > \'#{$buildStarted}\' AND \"status\" = \'finished\'"
    getData = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{querySelectAggregatedData}" `
    data = JSON.parse(getData)
    generators_count = data['results'][0]['series'][0]['values'][0][1]
    if ( generators_count.to_i == $lg_count.to_i )
        queryCheckNameLastLg = "SELECT last(overall_duration_in_ms),loadGenerator FROM \"testStartEnd\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"buildID\" = \'#{$current_build_number}\' AND time > \'#{$buildStarted}\' AND \"status\" = \'finished\'"
        p queryCheckNameLastLg
        getName = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{queryCheckNameLastLg}" `
        p getName
        data = JSON.parse(getName)
        lastLgName = data['results'][0]['series'][0]['values'][0][2]
        if (lastLgName == @lg_id)
           $logger.info "  |- Container with id = #{@lg_id} is the last"
           return true
        else
          return false
        end
    end
  end

  def getPerLgInitNumThreads
    p 'getPerLgInitNumThreads'
    querySelectAggregatedData = "SELECT max(startedThreads) as \"initNumThreads\" FROM \"virtualUsers\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"loadGenerator\"=\'#{@lg_id}\' AND \"buildID\"=\'#{$current_build_number}\' AND time > \'#{$buildStarted}\'"
    getData = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{querySelectAggregatedData}" `
    data = JSON.parse(getData)
    $initNumThreads = data['results'][0]['series'][0]['values'][0][1]
  end


  def getAggregatedInitNumThreads
    p 'getAggregatedInitNumThreads'
    querySelectAggregatedData = "SELECT SUM(initNumThreads) FROM (SELECT max(startedThreads) as \"initNumThreads\" FROM \"virtualUsers\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"buildID\"=\'#{$current_build_number}\' AND time > \'#{$buildStarted}\' GROUP BY loadGenerator)"
    getData = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{querySelectAggregatedData}" `
    data = JSON.parse(getData)
    $initNumThreads = data['results'][0]['series'][0]['values'][0][1]
  end

	def getAggregatedData
    p 'getAggregatedData'
	  querySelectAggregatedData = "SELECT count(responseTime) as \"aggregate_report_count\",mean(responseTime) as \"average\",median(responseTime) as \"aggregate_report_median\",min(responseTime) as \"aggregate_report_min\",max(responseTime) as \"aggregate_report_max\",percentile(responseTime,90) as \"aggregate_report_90\%_line\",percentile(responseTime,95) as \"aggregate_report_95\%_line\",percentile(responseTime,99) as \"aggregate_report_99\%_line\",stddev(responseTime) as \"aggregate_report_stddev\",(sum(errorCount)/count(responseTime))*100 as \"aggregate_report_error\%\" FROM \"requestsRaw\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"buildID\"=\'#{$current_build_number}\' AND \"testType\"=\'#{$test_type}\' AND time > \'#{$buildStarted}\' GROUP BY \"requestName\",\"buildID\",\"projectName\",\"envType\",\"testType\""
    $getSelectedData = `curl -G "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/query?pretty=true&u=#{@influx_username}&p=#{@influx_password}" --data-urlencode "db=#{@influx_db}" --data-urlencode "q=#{querySelectAggregatedData.gsub("%","zz")}" `
	end

  def aggregatedDataToCSV
    data = JSON.parse($getSelectedData)
    CSV.open("#{$data_path}/aggregatedData.csv", "wb") do |csv|
      csv << ["sampler_label"] + data['results'][0]['series'][0]['columns'][1..-1].each {|element| element.gsub!("zz","%")}
      data['results'][0]['series'].each do |i|
        csv << [i['tags']['requestName']] + i['values'][0][1..-1]
      end
    end
  end

  # Parsing query results for generating string for sending data via curl
  def parsing_query(query,measurement)
    result = ""
    result+="#{measurement}"
    query['tags'][:version_id] = @version_id if @version_id != ""
    query['tags'].each { |k,v| result+=",#{k}=#{v.gsub(' ','\ ')}" }
    result+=" "
    query['values'][0].each do |k,v|
      next if k =~ /time/
      v = "#{v.to_i}i" if k =~ /aggregate_report_count/
      v = "#{v.to_i}i" if k =~ /aggregate_report_min/
      v = "#{v.to_i}i" if k =~ /aggregate_report_max/
      v = "#{v.to_i}i" if k =~ /aggregate_report_90%_line/
      v = "#{v.to_i}i" if k =~ /aggregate_report_95%_line/
      v = "#{v.to_i}i" if k =~ /aggregate_report_99%_line/
      v = 0 if v.nil?
      result+="#{k}=#{v},"
    end
    result.chomp!(',')
    result+=" #{Time.now.strftime('%s')}"
    return result
  end

  def sendAggregatedDataToDB(test_duration)
    p 'Starting sending aggregated data ...'
    influxdbUrl = "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/"
    influxdbDatabase = "#{@influx_db}"
    influxdb = InfluxDB::Client.new influxdbDatabase,
               url: influxdbUrl,
               username: @influx_username,
               password: @influx_password,
               open_timeout: 600,
               read_timeout: 600

    # Data for sending aggregated metrics to influxdb
    aggregated_data = influxdb.query "SELECT count(responseTime) as \"aggregate_report_count\",mean(responseTime) as \"average\",median(responseTime) as \"aggregate_report_median\",min(responseTime) as \"aggregate_report_min\",max(responseTime) as \"aggregate_report_max\",percentile(responseTime,90) as \"aggregate_report_90%%_line\",percentile(responseTime,95) as \"aggregate_report_95%%_line\",percentile(responseTime,99) as \"aggregate_report_99%%_line\",stddev(responseTime) as \"aggregate_report_stddev\",(sum(errorCount)/count(responseTime))*100 as \"aggregate_report_error%%\" FROM \"requestsRaw\" WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"buildID\"=\'#{$current_build_number}\' AND time > \'#{$buildStarted}\' GROUP BY \"requestName\",\"buildID\",\"projectName\",\"envType\",\"testType\""
    aggregated_data.each do |str|
      data_to_write = `curl -i -XPOST "#{@influx_protocol}://#{@influx_host}:#{@influx_port}/write?db=#{@influx_db}&precision=s&u=#{@influx_username}&p=#{@influx_password}" --data-binary '#{parsing_query(str,"aggregateReports")}'`
      $logger.info "Data for writing #{data_to_write}"
    end

    # Data for sendming TOTAL metrics to influxdb
    total_report_rate = influxdb.query "SELECT SUM(aggregate_report_count)/#{test_duration} as \"aggregate_report_rate\",SUM(\"aggregate_report_error%%\")/count(\"aggregate_report_error%%\") as \"aggregate_report_error%%\", SUM(aggregate_report_count) as \"aggregate_report_count\"  from aggregateReports WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"buildID\"=\'#{$current_build_number}\' AND time > \'#{$buildStarted}\'"
    total_report_bandwith = influxdb.query "SELECT SUM(responseBytes)/#{test_duration.to_i}/1000 as \"aggregate_report_bandwidth\" from requestsRaw WHERE \"projectName\"=\'#{$project_id}\' AND \"envType\"=\'#{$env_type}\' AND \"testType\"=\'#{$test_type}\' AND \"buildID\"=\'#{$current_build_number}\' AND time > \'#{$buildStarted}\'"
    data = {
      series: "aggregateReports",
      tags: {
        buildID: "#{$current_build_number}",
        envType: "#{$env_type}",
        projectName: "#{$project_id}",
        requestName: "TOTAL",
        version_id: "#{@version_id}",
        testType: "#{$test_type}"
      },
      values: {
        aggregate_report_count: total_report_rate[0]['values'][0]['aggregate_report_count'],
        aggregate_report_rate: "#{total_report_rate[0]['values'][0]['aggregate_report_rate'].round(2)}/sec",
        aggregate_report_bandwidth: "#{total_report_bandwith[0]['values'][0]['aggregate_report_bandwidth'].round(2)}KB/s",
        "aggregate_report_error%"=>total_report_rate[0]['values'][0]['aggregate_report_error%'].to_f
      },
      timestamp: Time.now.to_i
    }
    influxdb.write_points(data,"s") # send data with time precision
  end

end
